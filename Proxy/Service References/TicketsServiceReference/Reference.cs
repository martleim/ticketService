//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tickets.Proxy.TicketsServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketsServiceReference.ITicketsService")]
    public interface ITicketsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAllEvents", ReplyAction="http://tempuri.org/ITicketsService/GetAllEventsResponse")]
        Tickets.Model.Event[] GetAllEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAllEvents", ReplyAction="http://tempuri.org/ITicketsService/GetAllEventsResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Event[]> GetAllEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAllEventSessions", ReplyAction="http://tempuri.org/ITicketsService/GetAllEventSessionsResponse")]
        Tickets.Model.Session[] GetAllEventSessions(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAllEventSessions", ReplyAction="http://tempuri.org/ITicketsService/GetAllEventSessionsResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Session[]> GetAllEventSessionsAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAllSessionTickets", ReplyAction="http://tempuri.org/ITicketsService/GetAllSessionTicketsResponse")]
        Tickets.Model.Ticket[] GetAllSessionTickets(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAllSessionTickets", ReplyAction="http://tempuri.org/ITicketsService/GetAllSessionTicketsResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Ticket[]> GetAllSessionTicketsAsync(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAllUserTransactions", ReplyAction="http://tempuri.org/ITicketsService/GetAllUserTransactionsResponse")]
        Tickets.Model.Transaction[] GetAllUserTransactions(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAllUserTransactions", ReplyAction="http://tempuri.org/ITicketsService/GetAllUserTransactionsResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Transaction[]> GetAllUserTransactionsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AddTransaction", ReplyAction="http://tempuri.org/ITicketsService/AddTransactionResponse")]
        void AddTransaction(Tickets.Model.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AddTransaction", ReplyAction="http://tempuri.org/ITicketsService/AddTransactionResponse")]
        System.Threading.Tasks.Task AddTransactionAsync(Tickets.Model.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/UpdateTransaction", ReplyAction="http://tempuri.org/ITicketsService/UpdateTransactionResponse")]
        void UpdateTransaction(Tickets.Model.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/UpdateTransaction", ReplyAction="http://tempuri.org/ITicketsService/UpdateTransactionResponse")]
        System.Threading.Tasks.Task UpdateTransactionAsync(Tickets.Model.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/RemoveTransaction", ReplyAction="http://tempuri.org/ITicketsService/RemoveTransactionResponse")]
        void RemoveTransaction(Tickets.Model.Transaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/RemoveTransaction", ReplyAction="http://tempuri.org/ITicketsService/RemoveTransactionResponse")]
        System.Threading.Tasks.Task RemoveTransactionAsync(Tickets.Model.Transaction transaction);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketsServiceChannel : Tickets.Proxy.TicketsServiceReference.ITicketsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicketsServiceClient : System.ServiceModel.ClientBase<Tickets.Proxy.TicketsServiceReference.ITicketsService>, Tickets.Proxy.TicketsServiceReference.ITicketsService {
        
        public TicketsServiceClient() {
        }
        
        public TicketsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TicketsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Tickets.Model.Event[] GetAllEvents() {
            return base.Channel.GetAllEvents();
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Event[]> GetAllEventsAsync() {
            return base.Channel.GetAllEventsAsync();
        }
        
        public Tickets.Model.Session[] GetAllEventSessions(int eventId) {
            return base.Channel.GetAllEventSessions(eventId);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Session[]> GetAllEventSessionsAsync(int eventId) {
            return base.Channel.GetAllEventSessionsAsync(eventId);
        }
        
        public Tickets.Model.Ticket[] GetAllSessionTickets(int sessionId) {
            return base.Channel.GetAllSessionTickets(sessionId);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Ticket[]> GetAllSessionTicketsAsync(int sessionId) {
            return base.Channel.GetAllSessionTicketsAsync(sessionId);
        }
        
        public Tickets.Model.Transaction[] GetAllUserTransactions(int userId) {
            return base.Channel.GetAllUserTransactions(userId);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Transaction[]> GetAllUserTransactionsAsync(int userId) {
            return base.Channel.GetAllUserTransactionsAsync(userId);
        }
        
        public void AddTransaction(Tickets.Model.Transaction transaction) {
            base.Channel.AddTransaction(transaction);
        }
        
        public System.Threading.Tasks.Task AddTransactionAsync(Tickets.Model.Transaction transaction) {
            return base.Channel.AddTransactionAsync(transaction);
        }
        
        public void UpdateTransaction(Tickets.Model.Transaction transaction) {
            base.Channel.UpdateTransaction(transaction);
        }
        
        public System.Threading.Tasks.Task UpdateTransactionAsync(Tickets.Model.Transaction transaction) {
            return base.Channel.UpdateTransactionAsync(transaction);
        }
        
        public void RemoveTransaction(Tickets.Model.Transaction transaction) {
            base.Channel.RemoveTransaction(transaction);
        }
        
        public System.Threading.Tasks.Task RemoveTransactionAsync(Tickets.Model.Transaction transaction) {
            return base.Channel.RemoveTransactionAsync(transaction);
        }
    }
}
