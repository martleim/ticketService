//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tickets.Proxy.SecurityServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SecurityServiceReference.ISecurityService")]
    public interface ISecurityService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/GetAllUsers", ReplyAction="http://tempuri.org/ISecurityService/GetAllUsersResponse")]
        Tickets.Model.User[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/GetAllUsers", ReplyAction="http://tempuri.org/ISecurityService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<Tickets.Model.User[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/GetUserByEmail", ReplyAction="http://tempuri.org/ISecurityService/GetUserByEmailResponse")]
        Tickets.Model.User GetUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/GetUserByEmail", ReplyAction="http://tempuri.org/ISecurityService/GetUserByEmailResponse")]
        System.Threading.Tasks.Task<Tickets.Model.User> GetUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/AddUser", ReplyAction="http://tempuri.org/ISecurityService/AddUserResponse")]
        void AddUser(Tickets.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/AddUser", ReplyAction="http://tempuri.org/ISecurityService/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(Tickets.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/UpdateUser", ReplyAction="http://tempuri.org/ISecurityService/UpdateUserResponse")]
        void UpdateUser(Tickets.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/UpdateUser", ReplyAction="http://tempuri.org/ISecurityService/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(Tickets.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/RemoveUser", ReplyAction="http://tempuri.org/ISecurityService/RemoveUserResponse")]
        void RemoveUser(Tickets.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/RemoveUser", ReplyAction="http://tempuri.org/ISecurityService/RemoveUserResponse")]
        System.Threading.Tasks.Task RemoveUserAsync(Tickets.Model.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/FindUser", ReplyAction="http://tempuri.org/ISecurityService/FindUserResponse")]
        Tickets.Model.AspNetUser FindUser(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/FindUser", ReplyAction="http://tempuri.org/ISecurityService/FindUserResponse")]
        System.Threading.Tasks.Task<Tickets.Model.AspNetUser> FindUserAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/GetByUserName", ReplyAction="http://tempuri.org/ISecurityService/GetByUserNameResponse")]
        Tickets.Model.AspNetUser GetByUserName(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecurityService/GetByUserName", ReplyAction="http://tempuri.org/ISecurityService/GetByUserNameResponse")]
        System.Threading.Tasks.Task<Tickets.Model.AspNetUser> GetByUserNameAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecurityServiceChannel : Tickets.Proxy.SecurityServiceReference.ISecurityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecurityServiceClient : System.ServiceModel.ClientBase<Tickets.Proxy.SecurityServiceReference.ISecurityService>, Tickets.Proxy.SecurityServiceReference.ISecurityService {
        
        public SecurityServiceClient() {
        }
        
        public SecurityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SecurityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecurityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecurityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Tickets.Model.User[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.User[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public Tickets.Model.User GetUserByEmail(string email) {
            return base.Channel.GetUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.User> GetUserByEmailAsync(string email) {
            return base.Channel.GetUserByEmailAsync(email);
        }
        
        public void AddUser(Tickets.Model.User user) {
            base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(Tickets.Model.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public void UpdateUser(Tickets.Model.User user) {
            base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(Tickets.Model.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public void RemoveUser(Tickets.Model.User user) {
            base.Channel.RemoveUser(user);
        }
        
        public System.Threading.Tasks.Task RemoveUserAsync(Tickets.Model.User user) {
            return base.Channel.RemoveUserAsync(user);
        }
        
        public Tickets.Model.AspNetUser FindUser(string userName, string password) {
            return base.Channel.FindUser(userName, password);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.AspNetUser> FindUserAsync(string userName, string password) {
            return base.Channel.FindUserAsync(userName, password);
        }
        
        public Tickets.Model.AspNetUser GetByUserName(string username) {
            return base.Channel.GetByUserName(username);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.AspNetUser> GetByUserNameAsync(string username) {
            return base.Channel.GetByUserNameAsync(username);
        }
    }
}
