//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tickets.Proxy.EventsServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventsServiceReference.IEventsService")]
    public interface IEventsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetSingleEvent", ReplyAction="http://tempuri.org/IEventsService/GetSingleEventResponse")]
        Tickets.Model.Event GetSingleEvent(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetSingleEvent", ReplyAction="http://tempuri.org/IEventsService/GetSingleEventResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Event> GetSingleEventAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetAllEvents", ReplyAction="http://tempuri.org/IEventsService/GetAllEventsResponse")]
        Tickets.Model.Event[] GetAllEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetAllEvents", ReplyAction="http://tempuri.org/IEventsService/GetAllEventsResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Event[]> GetAllEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/AddEvent", ReplyAction="http://tempuri.org/IEventsService/AddEventResponse")]
        void AddEvent(Tickets.Model.Event e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/AddEvent", ReplyAction="http://tempuri.org/IEventsService/AddEventResponse")]
        System.Threading.Tasks.Task AddEventAsync(Tickets.Model.Event e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/UpdateEvent", ReplyAction="http://tempuri.org/IEventsService/UpdateEventResponse")]
        void UpdateEvent(Tickets.Model.Event e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/UpdateEvent", ReplyAction="http://tempuri.org/IEventsService/UpdateEventResponse")]
        System.Threading.Tasks.Task UpdateEventAsync(Tickets.Model.Event e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/RemoveEvent", ReplyAction="http://tempuri.org/IEventsService/RemoveEventResponse")]
        void RemoveEvent(Tickets.Model.Event e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/RemoveEvent", ReplyAction="http://tempuri.org/IEventsService/RemoveEventResponse")]
        System.Threading.Tasks.Task RemoveEventAsync(Tickets.Model.Event e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetAllEventSessions", ReplyAction="http://tempuri.org/IEventsService/GetAllEventSessionsResponse")]
        Tickets.Model.Session[] GetAllEventSessions(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetAllEventSessions", ReplyAction="http://tempuri.org/IEventsService/GetAllEventSessionsResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Session[]> GetAllEventSessionsAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetAllEventTickets", ReplyAction="http://tempuri.org/IEventsService/GetAllEventTicketsResponse")]
        Tickets.Model.Ticket[] GetAllEventTickets(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetAllEventTickets", ReplyAction="http://tempuri.org/IEventsService/GetAllEventTicketsResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Ticket[]> GetAllEventTicketsAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetSingleSession", ReplyAction="http://tempuri.org/IEventsService/GetSingleSessionResponse")]
        Tickets.Model.Session GetSingleSession(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetSingleSession", ReplyAction="http://tempuri.org/IEventsService/GetSingleSessionResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Session> GetSingleSessionAsync(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/AddSession", ReplyAction="http://tempuri.org/IEventsService/AddSessionResponse")]
        void AddSession(Tickets.Model.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/AddSession", ReplyAction="http://tempuri.org/IEventsService/AddSessionResponse")]
        System.Threading.Tasks.Task AddSessionAsync(Tickets.Model.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/UpdateSession", ReplyAction="http://tempuri.org/IEventsService/UpdateSessionResponse")]
        void UpdateSession(Tickets.Model.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/UpdateSession", ReplyAction="http://tempuri.org/IEventsService/UpdateSessionResponse")]
        System.Threading.Tasks.Task UpdateSessionAsync(Tickets.Model.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/RemoveSession", ReplyAction="http://tempuri.org/IEventsService/RemoveSessionResponse")]
        void RemoveSession(Tickets.Model.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/RemoveSession", ReplyAction="http://tempuri.org/IEventsService/RemoveSessionResponse")]
        System.Threading.Tasks.Task RemoveSessionAsync(Tickets.Model.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetAllSessionsTickets", ReplyAction="http://tempuri.org/IEventsService/GetAllSessionsTicketsResponse")]
        Tickets.Model.Ticket[] GetAllSessionsTickets(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetAllSessionsTickets", ReplyAction="http://tempuri.org/IEventsService/GetAllSessionsTicketsResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Ticket[]> GetAllSessionsTicketsAsync(int sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetSingleTicket", ReplyAction="http://tempuri.org/IEventsService/GetSingleTicketResponse")]
        Tickets.Model.Ticket GetSingleTicket(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/GetSingleTicket", ReplyAction="http://tempuri.org/IEventsService/GetSingleTicketResponse")]
        System.Threading.Tasks.Task<Tickets.Model.Ticket> GetSingleTicketAsync(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/AddTicket", ReplyAction="http://tempuri.org/IEventsService/AddTicketResponse")]
        void AddTicket(Tickets.Model.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/AddTicket", ReplyAction="http://tempuri.org/IEventsService/AddTicketResponse")]
        System.Threading.Tasks.Task AddTicketAsync(Tickets.Model.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/UpdateTicket", ReplyAction="http://tempuri.org/IEventsService/UpdateTicketResponse")]
        void UpdateTicket(Tickets.Model.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/UpdateTicket", ReplyAction="http://tempuri.org/IEventsService/UpdateTicketResponse")]
        System.Threading.Tasks.Task UpdateTicketAsync(Tickets.Model.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/RemoveTicket", ReplyAction="http://tempuri.org/IEventsService/RemoveTicketResponse")]
        void RemoveTicket(Tickets.Model.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventsService/RemoveTicket", ReplyAction="http://tempuri.org/IEventsService/RemoveTicketResponse")]
        System.Threading.Tasks.Task RemoveTicketAsync(Tickets.Model.Ticket ticket);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventsServiceChannel : Tickets.Proxy.EventsServiceReference.IEventsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventsServiceClient : System.ServiceModel.ClientBase<Tickets.Proxy.EventsServiceReference.IEventsService>, Tickets.Proxy.EventsServiceReference.IEventsService {
        
        public EventsServiceClient() {
        }
        
        public EventsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Tickets.Model.Event GetSingleEvent(int eventId) {
            return base.Channel.GetSingleEvent(eventId);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Event> GetSingleEventAsync(int eventId) {
            return base.Channel.GetSingleEventAsync(eventId);
        }
        
        public Tickets.Model.Event[] GetAllEvents() {
            return base.Channel.GetAllEvents();
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Event[]> GetAllEventsAsync() {
            return base.Channel.GetAllEventsAsync();
        }
        
        public void AddEvent(Tickets.Model.Event e) {
            base.Channel.AddEvent(e);
        }
        
        public System.Threading.Tasks.Task AddEventAsync(Tickets.Model.Event e) {
            return base.Channel.AddEventAsync(e);
        }
        
        public void UpdateEvent(Tickets.Model.Event e) {
            base.Channel.UpdateEvent(e);
        }
        
        public System.Threading.Tasks.Task UpdateEventAsync(Tickets.Model.Event e) {
            return base.Channel.UpdateEventAsync(e);
        }
        
        public void RemoveEvent(Tickets.Model.Event e) {
            base.Channel.RemoveEvent(e);
        }
        
        public System.Threading.Tasks.Task RemoveEventAsync(Tickets.Model.Event e) {
            return base.Channel.RemoveEventAsync(e);
        }
        
        public Tickets.Model.Session[] GetAllEventSessions(int eventId) {
            return base.Channel.GetAllEventSessions(eventId);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Session[]> GetAllEventSessionsAsync(int eventId) {
            return base.Channel.GetAllEventSessionsAsync(eventId);
        }
        
        public Tickets.Model.Ticket[] GetAllEventTickets(int eventId) {
            return base.Channel.GetAllEventTickets(eventId);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Ticket[]> GetAllEventTicketsAsync(int eventId) {
            return base.Channel.GetAllEventTicketsAsync(eventId);
        }
        
        public Tickets.Model.Session GetSingleSession(int sessionId) {
            return base.Channel.GetSingleSession(sessionId);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Session> GetSingleSessionAsync(int sessionId) {
            return base.Channel.GetSingleSessionAsync(sessionId);
        }
        
        public void AddSession(Tickets.Model.Session session) {
            base.Channel.AddSession(session);
        }
        
        public System.Threading.Tasks.Task AddSessionAsync(Tickets.Model.Session session) {
            return base.Channel.AddSessionAsync(session);
        }
        
        public void UpdateSession(Tickets.Model.Session session) {
            base.Channel.UpdateSession(session);
        }
        
        public System.Threading.Tasks.Task UpdateSessionAsync(Tickets.Model.Session session) {
            return base.Channel.UpdateSessionAsync(session);
        }
        
        public void RemoveSession(Tickets.Model.Session session) {
            base.Channel.RemoveSession(session);
        }
        
        public System.Threading.Tasks.Task RemoveSessionAsync(Tickets.Model.Session session) {
            return base.Channel.RemoveSessionAsync(session);
        }
        
        public Tickets.Model.Ticket[] GetAllSessionsTickets(int sessionId) {
            return base.Channel.GetAllSessionsTickets(sessionId);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Ticket[]> GetAllSessionsTicketsAsync(int sessionId) {
            return base.Channel.GetAllSessionsTicketsAsync(sessionId);
        }
        
        public Tickets.Model.Ticket GetSingleTicket(int ticketId) {
            return base.Channel.GetSingleTicket(ticketId);
        }
        
        public System.Threading.Tasks.Task<Tickets.Model.Ticket> GetSingleTicketAsync(int ticketId) {
            return base.Channel.GetSingleTicketAsync(ticketId);
        }
        
        public void AddTicket(Tickets.Model.Ticket ticket) {
            base.Channel.AddTicket(ticket);
        }
        
        public System.Threading.Tasks.Task AddTicketAsync(Tickets.Model.Ticket ticket) {
            return base.Channel.AddTicketAsync(ticket);
        }
        
        public void UpdateTicket(Tickets.Model.Ticket ticket) {
            base.Channel.UpdateTicket(ticket);
        }
        
        public System.Threading.Tasks.Task UpdateTicketAsync(Tickets.Model.Ticket ticket) {
            return base.Channel.UpdateTicketAsync(ticket);
        }
        
        public void RemoveTicket(Tickets.Model.Ticket ticket) {
            base.Channel.RemoveTicket(ticket);
        }
        
        public System.Threading.Tasks.Task RemoveTicketAsync(Tickets.Model.Ticket ticket) {
            return base.Channel.RemoveTicketAsync(ticket);
        }
    }
}
